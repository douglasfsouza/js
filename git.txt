Conceito de repositorio distribuido

git config --list
git config --global user.name "Douglas Ferreira"
git config --global user.email "douglas.ferreira@totvs.com.br"
git push --set-upstream origin master (fazer upload do seu repositorio)
git pull origin - funcionou
.gitignore - um arquivo p/ informar arquivos para ignorar, pois nao precisam subir 

git blame <arquivo> -> mostra o histórico de quem alterou o arquivo

escopos:
system
global
local

git remote -v (para ver os repostitorios)

alterar/corrigir a mensagem de observacao do commit:

git commit --amend -m "nova mensagem de commit"

ssh-keygen (gera chaves)
   ao iniciar com o git em outra máquina é necessário configurar a url para que não use a conta do usuário anterior se for o caso
   ex: git remote set-url origin git@github.com:douglasfsouza/html.git
bitbucket (site de repositorios)
gitlab tambem
azure devops tambem

tag usado para indicar a versao

bom fazer pequenos commits

operacoes remotas
  clone - tira uma copia do repositorio central
    em caso de problema com senha, gerar credencial no site,
    botao abaixo de clone
  ls-remote
  fetch (atualiza o repositorio local, nao funcionou)
    p/ funcionar precisa fazer o merge
    ex. git fetch --all
        git merge
  pull(atualiza o repositorio e a area de trabalho fazendo merge)
     ex. git pull origin master
  push (check-in)
     git push -u origin master

git branch -a (ver as branches criadas)

a branch enxerga tudo que foi comitado nela e tambem o que foi incluido ou modificado em outras branches e ainda nao comitado, mas assim que comitar na branch somente ela exerga o conteudo commitado. então para as outras tambem enxergarem precisam fazer merge

git commmit -a -m  "alteracoes" (com -a inclui na index e da commit, mas nao funciona para arquivos novos)
-m=mensagem

git log -10

git status
git status -s (shortcut)
git pull
git stash apply
git add
git stash list

outra forma
git stash -> para salvar
git stash pop -> para retornar

stash - guarda e volta o codigo original salvando as alteracoes
index - para ver o que vai comitar

git reset arquivo (para tirar o arquivo da index)
git reset --hard  -> para desfazer todas as alteracoes
git rm (tira e exclui o arquivo)
git reset -> para limpar todos os arquivos da stage

git clean - para desfazer a alteração nao confirmada, nao funcionou,
so funciona com arquivos novos,
para desfazer uma alteração nao confirmada:
  arquivo novo que ainda nao esta na index, so excluir: rm arquivo
  arquivo novo ou ja existente ja adicionado na index, retirar da index com git git reset arquivo
  se ja existente, restaurar com git restore arquivo 
  se novo excluir com rm
  git rm arquivo -f
  git restore <file> - para descartar as alteraçoes
ou git checkout -- <file> - depende da versao do git
git add --all (comita todos os arquivos da index)

git rm "arquivo" --cached (apenas remove da index)

git clean -n (para limpar todos os caches)

git stash save test --include-untracked
git stash save 
git stash apply 0 (aplica a id 0)
faz merge automatico ao aplicar,
pode haver conflito, ira avisar

git branch -a (lista todas)
git checkout -b develop (cria de muda para develop)
git branch develop (cria branch develop)
git branch -m <novo_nome> p/ renomear a branch

e e <sha> para desfazer um checkin      - computador remoto
  precisa fazer um novo checkin
git stash - para desfazer antes do checkin
git reset HEAD~1 para desfazer o ultimo commit - computador local
(enquanto ainda nao fez push, se nao volta a alteracao quando fazer pull,
ou seja se ja  fez push, usar revert para desfazer)
git rebase
    o rebase é o seguinte.... 
	o git "tira" o seu commit, 
	faz um pull da branch que vc informa... 
	e depois tenta aplicar as suas alterações sobre a última versão...
	steps:
	    go to your branch
		make commit, but not push (TESTANDO FAZENDO PUSH ESTÁ MELHOR, SEM CONFLITOS ATE AGORA ..)
	    go to master branch
		git pull
	    go to your feature branch
		git fetch
		git rebase -i origin/master
		it will open the editor and remove all commits that are NOT yours
		   then close the editor
		if there are conflicts, fix it manually, save and commit it
		git rebase -- continue 
		#important, don’t do any git pull to merge from remote
		git push -- force-with-lease (overwrite the remote even there is divergent)
		
		Apos o rebase:
		   pode seguir alterando na sua branch, 
		   fazendo commits normalmente (sem push).... 
		   e antes de fazer o push, faz um rebase, ajusta os conflitos 
		   e ai faz um push já atualizado com a master....

git show <commit> - ver o commit
git log <arquivo> - ver as alteracoes no arquivo

git merge --squash
git merge --abort

git help tutorial

head é o ultimo commit feito, normalmente com o nome da branch

learninggitbranching.js.org

https://git-scm.com/book/pt-br/v2 (muito bom e em portugues)

try.github.io

github.com/globocom
github.com/loiane

Excluir uma branch
git branch -d <nome>

fork - uma copia do repositorio

git diff id1..id2
id1 - informar a mais antiga
id2 - informar a mais recente

Criando um projeto na nuvem GIT	:
Entrar git-scm.com
fazer o download p/ windows
ou get apt git p/ linux
criar usr e logar
git mergetool -> Resolver conflitos de merge
git mergetool --tool vimdiff
  editar a melhor split, salvar e sair
  :wqa -> para salvar tudo
  git config --global mergetool.keepBackup false
  
Erros:
  Erro com git clone, ao colar vem caracteres invalidos, digite o endereco
  Arquivos grandes, tamanho maximo permitido pelo git = 100MB,
    se fez commit, git rm <arq> --cached
  Erro com git clone, em caso de problema com senha, gerar credencial no site,
  botao abaixo de clone
  Erro ao tentar fazer commit com arquivos grandes, acima 100mb.
     Necessario desfazer o commit, excluir os arquivos grandes e subir o commit novamente
	 

Autenticacao 2FA - 2 fatores
para acessar o repositorio
  ira pedir o token, usar app TOTP Autenticador
para fazer push
  user.name=douglasfsouza
  user.password = token_gerado_pelo_site armezenado localmente
git config credential.helper store -> para armazenar e lembrar usr e senha

token em 20-06-24:
FIDO:/544401283754231425390534958268080129475328814411197032883677980297086941633177069222268784658501934998122432860586975280069903844263802268814534665175810109321447142660
rsa:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDXFv8qWPSn8zJox6T7Sorrhsjz6q5uCBHRJQoY3ORNd8EoMINIS9cxRw+zZaBC5ztOTD6lwwlq6lKA/zsBDERhrRMl9XgZ4O3eixEWhgHVqyqhzHUt4b1RCFt4KOd0QCdLpI6b2JH4fVVg9/5juK0lmK1ZI7OCgLtmah+opufh6guv3FA+sk2jSzRDxQphtBfAScv42kWaxbamsgYXeN5xVAWEsncaOrFhQRWldSrwf+7XLFQdfb/JIFvBT8ZY2U76urRdPA5yndpCEBKPY37L451jVmrYM4ikTRuIFg9wSidlnHObv99eX3dKJFd2TSNAy0uD2vam0G1z5G4BNtmw3TmvjeM5/exDokkH45dboCDOxj4eZdS7rViJ85wYwVsp3R1xKHkrC/05HCeWUXz1n1iBVx1TQqnVdIUAEuDKQWPf3azBd81Q0PTozpyQKFO6H0JXPxaB/dXc36VcLTPSk1ESudygvSXJDjDhtO3ngr/9HWGRzRdsqCBl/0db2JhNItDR9fyud3E4b+3raiHXDaclT6nvPtTylFPK+Q50EvbEVXAXPm6JzWcyatU/zPReg/T7AOhZyda2hc8eZ3pCbWRMMEbMq5LfdVbQVAlZx3KId2Xi1QMZxqiFJVGKCuAVw9bYUMx+GMLMk5G0CW9NkEMN72cgwxXJAv8J6NTkmw== douglasfsouza@gmail.com
configurar cada projeto:
git remote set-url origin git@github.com:douglasfsouza/js.git
git push

Submodulos:
   clonar o projeto fora de s3rial.www.srm
   entrar no srm:
     p/ editar o arquivo .gitmodules:
	     git submodule add ../s3rial.www.seuprojeto (errado)
		 git submodule add https://marcelo-cuin@dev.azure.com/marcelo-cuin/S3RIAL/_git/s3rial.www.distribution
		 MAS NÃO ADICIONA AUTOMATICAMENTE EM UI5.YAML, preciSA incluir manualmente

     git submodule init
     git submodule update
	 git submodule foreach "git pull"
	 no caso do s3rial.www.legacy, 
	     não cria a sub pasta, mas usa como um recurso
		 
git cherry-pick <commitId>		 
